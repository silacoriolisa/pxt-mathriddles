<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="rt[QZ@]^UGzCsg_3IRZP" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="=P;AL;cA}]t0uqs|VLXK"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace MathRiddle{" line1="" line2="    export class Riddle{" line3="        riddletxt: string;" line4="        result: number;" line5="        answer: number;" line6=" " line7="        //%block = &quot;Create a riddle in |$this&quot;" line8="        //%this.defl = myRiddle" line9="        askRiddle(): void{" line10="            let mathOp = randOp();" line11="            let operator, opA, opB;" line12="" line13="            switch (mathOp) {" line14="                case 1:" line15="                    opA = randint(1, 15);" line16="                    opB = randint(1, 15);" line17="                    operator = &quot;+&quot;;" line18="                    this.result = opA + opB;" line19="                    break;" line20="                case 2:" line21="                    opA = randint(1, 15);" line22="                    opB = randint(1, opA);" line23="                    operator = &quot;-&quot;;" line24="                    this.result = opA - opB;" line25="                    break;" line26="                case 3:" line27="                    opA = randint(1, 10);" line28="                    opB = randint(1, (10 - opA + 1));" line29="                    operator = &quot;*&quot;;" line30="                    this.result = opA * opB;" line31="                    break;" line32="                case 4:" line33="                    opA = randint(1, 30);" line34="                    opB = randint(1, 10);                    " line35="                    while(opA % opB != 0) {" line36="                        opA = randint(1, 30);" line37="                        opB = randint(1, 10);" line38="                    }" line39="                    this.result = opA / opB;" line40="                    break;" line41="            }" line42="            this.riddletxt = (convertToText(opA) + operator + convertToText(opB));" line43="        }" line44="" line45="        //%block = &quot;Show |$this&quot;" line46="        //%this.defl = myRiddle" line47="        showRiddle(): void{" line48="            basic.showString(this.riddletxt); //&quot;?&quot; is automatically displayed when requested for inputs" line49="        }" line50="" line51="        //%block = &quot;Show answer to |$this&quot;" line52="        //%this.defl = myRiddle" line53="        showAnswer(): void{" line54="            basic.showString(convertToText(this.answer));" line55="        }" line56="" line57="        //%block = &quot;Check answer to |$this&quot;" line58="        //%this.defl = myRiddle" line59="        checkAsnwer(): boolean{" line60="            if(this.answer == this.result){" line61="                return true;" line62="            }else{" line63="                return false;" line64="            }" line65="        }" line66="" line67="        //%block = &quot;Wait for a reply to |$this&quot;" line68="        //%this.defl = myRiddle" line69="        getReply(): void{" line70="        let tens, ones, result = 0;" line71="" line72="        tens = this.updateReply(tens);" line73="        basic.pause(200);" line74="        ones = this.updateReply(ones);" line75="        " line76="        this.answer = tens * 10 + ones;" line77="        }" line78="" line79="        private updateReply(value: number): number{" line80="            while (!(input.buttonIsPressed(Button.A) &amp;&amp; input.buttonIsPressed(Button.B))) {" line81="                " line82="                if (input.buttonIsPressed(Button.A)) {" line83="                    if (value &lt; 9) {" line84="                        value++;" line85="                    } else {" line86="                        value = 0;" line87="                    }" line88="                } else if (input.buttonIsPressed(Button.B)) {" line89="                    if (value &gt; 0) {" line90="                        value--;" line91="                    } else {" line92="                        value = 9;" line93="                    }" line94="                }" line95="                basic.showNumber(value);" line96="            }" line97="            basic.showArrow(ArrowNames.East);" line98="            return value;" line99="        }" line100="" line101="    }//end of class" line102="" line103="    function randOp(): number{" line104="        // 1:&quot;+&quot;, 2:&quot;-&quot;, 3:&quot;*&quot;, 4:&quot;/&quot;" line105="        //Division needs to be thought through" line106="        return randint(1, 4);" line107="    }" line108="" line109="    //% block=&quot;newRiddle&quot;" line110="    //% blockSetVariable=myRiddle" line111="    export function createMyRiddle(): Riddle {" line112="        let myRiddle = new Riddle();" line113="        myRiddle.riddletxt = &quot;&quot;;" line114="        myRiddle.result = 0;" line115="        myRiddle.answer = 0;" line116="        return myRiddle;" line117="    }" line118="" line119="}" numlines="120"></mutation></block></statement></block></xml>