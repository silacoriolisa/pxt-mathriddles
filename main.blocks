<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="/v{(f+z|FzPXtm)Jf6iT" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="cV_Nc8f}Lvoo#[uCcG?Y"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace MathRiddle{" line1="" line2="    export class Riddle{" line3="        private riddletxt: string;" line4="        private result: number;" line5="        private answer: number;" line6=" " line7="        constructor (riddletxt: string, result: number, answer: number){" line8="            this.riddletxt = riddletxt;" line9="            this.result = result;" line10="            this.answer = answer;" line11="        }" line12="" line13="" line14="        //%block = &quot;%myRiddle|Create a riddle&quot;" line15="        public askRiddle(): void{" line16="            let mathOp = randOp();" line17="            let operator, opA, opB;" line18="" line19="            switch (mathOp) {" line20="                case 1:" line21="                    opA = randint(1, 15);" line22="                    opB = randint(1, 15);" line23="                    operator = &quot;+&quot;;" line24="                    this.result = opA + opB;" line25="                    break;" line26="                case 2:" line27="                    opA = randint(1, 15);" line28="                    opB = randint(1, opA);" line29="                    operator = &quot;-&quot;;" line30="                    this.result = opA - opB;" line31="                    break;" line32="                case 3:" line33="                    opA = randint(1, 10);" line34="                    opB = randint(1, (10 - opA + 1));" line35="                    operator = &quot;*&quot;;" line36="                    this.result = opA * opB;" line37="                    break;" line38="                case 4:" line39="                    opA = randint(1, 30);" line40="                    opB = randint(1, 10);                    " line41="                    while(opA % opB != 0) {" line42="                        opA = randint(1, 30);" line43="                        opB = randint(1, 10);" line44="                    }" line45="                    this.result = opA / opB;" line46="                    break;" line47="            }" line48="            this.riddletxt = (convertToText(opA) + operator + convertToText(opB));" line49="        }" line50="" line51="        //%block = &quot;Show |$this&quot;" line52="        //%this.defl = myRiddle" line53="        public showRiddle(): void{" line54="            basic.showString(this.riddletxt); //&quot;?&quot; is automatically displayed when requested for inputs" line55="        }" line56="" line57="        //%block = &quot;Show answer to |$this&quot;" line58="        //%this.defl = myRiddle" line59="        public showAnswer(): void{" line60="            basic.showString(convertToText(this.answer));" line61="        }" line62="" line63="        //%block = &quot;Check answer to |$this&quot;" line64="        //%this.defl = myRiddle" line65="        public checkAsnwer(): boolean{" line66="            if(this.answer == this.result){" line67="                return true;" line68="            }else{" line69="                return false;" line70="            }" line71="        }" line72="" line73="        //%block = &quot;Wait for a reply to |$this&quot;" line74="        //%this.defl = myRiddle" line75="       public getReply(): void{" line76="        let tens, ones, result = 0;" line77="" line78="        tens = this.updateReply(tens);" line79="        basic.pause(200);" line80="        ones = this.updateReply(ones);" line81="        " line82="        this.answer = tens * 10 + ones;" line83="        }" line84="" line85="        private updateReply(value: number): number{" line86="            while (!(input.buttonIsPressed(Button.A) &amp;&amp; input.buttonIsPressed(Button.B))) {" line87="                " line88="                if (input.buttonIsPressed(Button.A)) {" line89="                    if (value &lt; 9) {" line90="                        value++;" line91="                    } else {" line92="                        value = 0;" line93="                    }" line94="                } else if (input.buttonIsPressed(Button.B)) {" line95="                    if (value &gt; 0) {" line96="                        value--;" line97="                    } else {" line98="                        value = 9;" line99="                    }" line100="                }" line101="                basic.showNumber(value);" line102="            }" line103="            basic.showArrow(ArrowNames.East);" line104="            return value;" line105="        }" line106="" line107="    }//end of class" line108="" line109="    export let myRiddle: Riddle" line110="" line111="    function randOp(): number{" line112="        // 1:&quot;+&quot;, 2:&quot;-&quot;, 3:&quot;*&quot;, 4:&quot;/&quot;" line113="        //Division needs to be thought through" line114="        return randint(1, 4);" line115="    }" line116="" line117="    //% block=&quot;newRiddle&quot;" line118="    //% blockSetVariable=myRiddle" line119="    export function createMyRiddle(): Riddle {" line120="        let myRiddle2 = new Riddle(&quot;no text&quot;,0,0);" line121="        return myRiddle2;" line122="    }" line123="" line124="}" numlines="125"></mutation></block></statement></block></xml>