<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="Y.$zWRMF9dv_cvC=4*Tu" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="x^wfceEwq@hRlfIeRT;:"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace MathRiddle{" line1="" line2="    export enum PuzzleBlockProperty {" line3="        //% block=Y" line4="        Y," line5="        //% block=N" line6="        N" line7="    }" line8="" line9="    export class Riddle{" line10="        private riddletxt: string;" line11="        private result: number;" line12="        private answer: number;" line13="        private score: boolean;" line14="        private init: boolean;" line15=" " line16="        constructor (riddletxt: string, result: number, answer: number,score:boolean, init: boolean){" line17="            this.riddletxt = riddletxt;" line18="            this.result = result;" line19="            this.answer = answer;" line20="            this.score = score;" line21="            this.init = init;" line22="        }" line23="" line24="        /**" line25="         * Create a new riddle" line26="         * @param this the myRiddle content to regenerate" line27="         */" line28="        //%blockId=create_new_riddle block=&quot;%myRiddle|Create a new puzzle to solve&quot;" line29="        public askRiddle(): void{" line30="            let mathOp = randOp();" line31="            let operator, opA, opB;" line32="" line33="            switch (mathOp) {" line34="                case 1:" line35="                    opA = randint(1, 15);" line36="                    opB = randint(1, 15);" line37="                    operator = &quot;+&quot;;" line38="                    this.result = opA + opB;" line39="                    break;" line40="                case 2:" line41="                    opA = randint(1, 15);" line42="                    opB = randint(1, opA);" line43="                    operator = &quot;-&quot;;" line44="                    this.result = opA - opB;" line45="                    break;" line46="                case 3:" line47="                    opA = randint(1, 10);" line48="                    opB = randint(1, (10 - opA + 1));" line49="                    operator = &quot;*&quot;;" line50="                    this.result = opA * opB;" line51="                    break;" line52="                case 4:" line53="                    opA = randint(1, 30);" line54="                    opB = randint(1, 10);                    " line55="                    while(opA % opB != 0) {" line56="                        opA = randint(1, 30);" line57="                        opB = randint(1, 10);" line58="                    }" line59="                    operator = &quot;/&quot;;" line60="                    this.result = opA / opB;" line61="                    break;" line62="            }" line63="            this.riddletxt = (convertToText(opA) + operator + convertToText(opB));" line64="        }" line65="" line66="        /**" line67="         * Display the puzzle test" line68="         * @param this the myRiddle content to show" line69="         */" line70="        //%blockId=display_puzzle_text block=&quot;%myRiddle|Display puzzle text&quot;" line71="        public showRiddle(): void{" line72="            basic.showString(this.riddletxt); " line73="        }" line74="        /**" line75="         * Display the puzzle score" line76="         * @param this the myRiddle content to show" line77="         */" line78="        //%blockId=display_puzzle_score block=&quot;%myRiddle|Get puzzle score&quot;" line79="        public getScore(): boolean {" line80="            return this.score;" line81="        }" line82="" line83="        /**" line84="         * Display the answer provided by the User" line85="         * @param this the myRiddle content to show" line86="         */" line87="        //%blockId=display_puzzle_answer block=&quot;%myRiddle|Display User answer&quot;" line88="        public showAnswer(): void{" line89="            basic.showString(convertToText(this.answer));" line90="        }" line91="" line92="        /**" line93="         * Check the answer provided by the User" line94="         * @param this the myRiddle content to verify" line95="         */" line96="        //%blockId=check_puzzle_answer block=&quot;%myRiddle|Check User answer&quot;" line97="        public checkAsnwer(): boolean{" line98="            if(this.answer == this.result){" line99="                this.score = true;" line100="            }else{" line101="                this.score = false;" line102="            }" line103="            return this.score" line104="        }" line105="" line106="        /**" line107="         * Get the answer provided by the User" line108="         * @param this the myRiddle to save User answer to" line109="         */" line110="        //%blockId=get_puzzle_answer block=&quot;%myRiddle|Get User answer&quot;" line111="       public getReply(): void{" line112="        let tens, ones, result = 0;" line113="" line114="        tens = this.updateReply(tens);" line115="        basic.pause(200);" line116="        ones = this.updateReply(ones);" line117="        " line118="        this.answer = tens * 10 + ones;" line119="        }" line120="" line121="        /**" line122="         * Complete puzzle workflow in one block" line123="         * @param this the myRiddle to show, answer and veriy" line124="         */" line125="        //%blockId=puzzle_workflow block=&quot;%myRiddle|Test yourself!&quot;" line126="        public completePuzzleWorkflow(): boolean {" line127="            this.askRiddle();" line128="            this.showRiddle();" line129="            this.getReply();" line130="            this.checkAsnwer()" line131="            return this.score;" line132="        }" line133="" line134="        /**" line135="         * Complete puzzle workflow in one block with repetition and result evaluation" line136="         * @param this the myRiddle to show, answer and veriy" line137="         */" line138="        //%block=&quot;%myRiddle|Puzzle to solve, repeat %PuzzleBlockProperty&quot;" line139="        public puzzleBlock(repeat: PuzzleBlockProperty): void {" line140="" line141="            if(!this.init){" line142="                this.askRiddle();" line143="                this.init = true;" line144="            }" line145="" line146="            if(repeat == PuzzleBlockProperty.Y &amp;&amp; this.score){" line147="                    this.askRiddle()" line148="            }" line149="            this.showRiddle();" line150="            this.getReply();" line151="            if (this.checkAsnwer()) {" line152="                basic.showIcon(IconNames.Heart)" line153="            } else {" line154="                basic.showIcon(IconNames.No)" line155="            }" line156="            basic.pause(1000);" line157="            basic.clearScreen()" line158="            basic.pause(300);" line159="        }" line160="" line161="        private updateReply(value: number): number{" line162="            while (!(input.buttonIsPressed(Button.A) &amp;&amp; input.buttonIsPressed(Button.B))) {" line163="                " line164="                if (input.buttonIsPressed(Button.A)) {" line165="                    if (value &lt; 9) {" line166="                        value++;" line167="                    } else {" line168="                        value = 0;" line169="                    }" line170="                } else if (input.buttonIsPressed(Button.B)) {" line171="                    if (value &gt; 0) {" line172="                        value--;" line173="                    } else {" line174="                        value = 9;" line175="                    }" line176="                }" line177="                basic.showNumber(value);" line178="            }" line179="            basic.showArrow(ArrowNames.East);" line180="            return value;" line181="        }" line182="" line183="    }//end of class" line184="" line185="    export let myRiddle: Riddle" line186="" line187="    function randOp(): number{" line188="        // 1:&quot;+&quot;, 2:&quot;-&quot;, 3:&quot;*&quot;, 4:&quot;/&quot;" line189="        //Division needs to be thought through" line190="        return randint(1, 4);" line191="    }" line192="" line193="    //% block=&quot;newRiddle&quot;" line194="    //% blockSetVariable=myRiddle" line195="    export function createMyRiddle(): Riddle {" line196="        let myRiddle2 = new Riddle(&quot;no text&quot;,0,0,false,false);" line197="        return myRiddle2;" line198="    }" line199="" line200="}" numlines="201"></mutation></block></statement></block></xml>