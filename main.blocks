<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="E]|+/%I*-?RiN]hD$3m7" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="y~z=LhA7)7zg-W^j^rzh"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace MathRiddle{" line1="" line2="    export class Riddle{" line3="        riddle: string;" line4="        result: number;" line5="        answer: number;" line6=" " line7="        //%block = &quot;Create a riddle in %myRiddle&quot;" line8="        askRiddle(): void{" line9="            let mathOp = randOp();" line10="            let operator, opA, opB;" line11="" line12="            switch (mathOp) {" line13="                case 1:" line14="                    opA = randint(1, 15);" line15="                    opB = randint(1, 15);" line16="                    operator = &quot;+&quot;;" line17="                    this.result = opA + opB;" line18="                    break;" line19="                case 2:" line20="                    opA = randint(1, 15);" line21="                    opB = randint(1, opA);" line22="                    operator = &quot;-&quot;;" line23="                    this.result = opA - opB;" line24="                    break;" line25="                case 3:" line26="                    opA = randint(1, 10);" line27="                    opB = randint(1, (10 - opA + 1));" line28="                    operator = &quot;*&quot;;" line29="                    this.result = opA * opB;" line30="                    break;" line31="                case 4:" line32="            }" line33="            this.riddle = (convertToText(opA) + operator + convertToText(opB));" line34="        }" line35="" line36="        //%block = &quot;Show %myRiddle&quot;" line37="        showRiddle(): void{" line38="            basic.showString(this.riddle + &quot;?&quot;);" line39="        }" line40="" line41="        //%block = &quot;Show answer to %myRiddle&quot;" line42="        showAnswer(): void{" line43="            basic.showString(convertToText(this.answer));" line44="        }" line45="" line46="        //%block = &quot;Wait for a reply to %myRiddle&quot;" line47="        getReply(): void{" line48="        let tens, ones, result = 0;" line49="" line50="        tens = this.updateReply(tens);" line51="        basic.pause(200);" line52="        ones = this.updateReply(ones);" line53="        " line54="        this.result = tens * 10 + ones;" line55="        }" line56="" line57="        private updateReply(value: number): number{" line58="            while (!(input.buttonIsPressed(Button.A) &amp;&amp; input.buttonIsPressed(Button.B))) {" line59="                basic.showNumber(value);" line60="                if (input.buttonIsPressed(Button.A)) {" line61="                    if (value &lt; 9) {" line62="                        value++;" line63="                    } else {" line64="                        value = 0;" line65="                    }" line66="                } else if (input.buttonIsPressed(Button.B)) {" line67="                    if (value &gt; 0) {" line68="                        value--;" line69="                    } else {" line70="                        value = 9;" line71="                    }" line72="                }" line73="            }" line74="            return value" line75="        }" line76="" line77="    //end of class definition" line78="    }" line79="" line80="    function randOp(): number{" line81="        // 1:&quot;+&quot;, 2:&quot;-&quot;, 3:&quot;*&quot;, 4:&quot;/&quot;" line82="        //Division needs to be thought through" line83="        return randint(1, 3)" line84="    }" line85="" line86="    //% block=&quot;NewRiddle&quot;" line87="    //% blockSetVariable=myRiddle" line88="    export function createMyRiddle(): Riddle {" line89="        let myRiddle = new Riddle();" line90="        myRiddle.riddle = &quot;&quot;;" line91="        myRiddle.result = 0;" line92="        myRiddle.answer = 0;" line93="        return myRiddle;" line94="    }" line95="" line96="}" numlines="97"></mutation></block></statement></block></xml>