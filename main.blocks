<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="f-(w~AGUJKaRp8EJ!^?=" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id=";?N;,KlwE^/;(VYP|:;b"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace MathRiddle{" line1="" line2="    export class Riddle{" line3="        riddletxt: string;" line4="        result: number;" line5="        answer: number;" line6=" " line7="        //%block = &quot;Create a riddle in |$this&quot;" line8="        //%this.defl = myRiddle" line9="        askRiddle(): void{" line10="            let mathOp = randOp();" line11="            let operator, opA, opB;" line12="" line13="            switch (mathOp) {" line14="                case 1:" line15="                    opA = randint(1, 15);" line16="                    opB = randint(1, 15);" line17="                    operator = &quot;+&quot;;" line18="                    this.result = opA + opB;" line19="                    break;" line20="                case 2:" line21="                    opA = randint(1, 15);" line22="                    opB = randint(1, opA);" line23="                    operator = &quot;-&quot;;" line24="                    this.result = opA - opB;" line25="                    break;" line26="                case 3:" line27="                    opA = randint(1, 10);" line28="                    opB = randint(1, (10 - opA + 1));" line29="                    operator = &quot;*&quot;;" line30="                    this.result = opA * opB;" line31="                    break;" line32="                case 4:" line33="            }" line34="            this.riddletxt = (convertToText(opA) + operator + convertToText(opB));" line35="        }" line36="" line37="        //%block = &quot;Show |$this&quot;" line38="        //%this.defl = myRiddle" line39="        showRiddle(): void{" line40="            basic.showString(this.riddletxt); //&quot;?&quot; is automatically displayed when requested for inputs" line41="        }" line42="" line43="        //%block = &quot;Show answer to |$this&quot;" line44="        //%this.defl = myRiddle" line45="        showAnswer(): void{" line46="            basic.showString(convertToText(this.answer));" line47="        }" line48="" line49="        //%block = &quot;Check answer to |$this&quot;" line50="        //%this.defl = myRiddle" line51="        checkAsnwer(): boolean{" line52="            if(this.answer == this.result){" line53="                return true;" line54="            }else{" line55="                return false;" line56="            }" line57="        }" line58="" line59="        //%block = &quot;Wait for a reply to |$this&quot;" line60="        //%this.defl = myRiddle" line61="        getReply(): void{" line62="        let tens, ones, result = 0;" line63="" line64="        tens = this.updateReply(tens);" line65="        basic.pause(200);" line66="        ones = this.updateReply(ones);" line67="        " line68="        this.answer = tens * 10 + ones;" line69="        }" line70="" line71="        private updateReply(value: number): number{" line72="            while (!(input.buttonIsPressed(Button.A) &amp;&amp; input.buttonIsPressed(Button.B))) {" line73="                " line74="                if (input.buttonIsPressed(Button.A)) {" line75="                    if (value &lt; 9) {" line76="                        value++;" line77="                    } else {" line78="                        value = 0;" line79="                    }" line80="                } else if (input.buttonIsPressed(Button.B)) {" line81="                    if (value &gt; 0) {" line82="                        value--;" line83="                    } else {" line84="                        value = 9;" line85="                    }" line86="                }" line87="                basic.showNumber(value);" line88="            }" line89="            basic.showArrow(ArrowNames.East);" line90="            return value;" line91="        }" line92="" line93="    }//end of class" line94="" line95="    function randOp(): number{" line96="        // 1:&quot;+&quot;, 2:&quot;-&quot;, 3:&quot;*&quot;, 4:&quot;/&quot;" line97="        //Division needs to be thought through" line98="        return randint(1, 3);" line99="    }" line100="" line101="    //% block=&quot;newRiddle&quot;" line102="    //% blockSetVariable=myRiddle" line103="    export function createMyRiddle(): Riddle {" line104="        let myRiddle = new Riddle();" line105="        myRiddle.riddletxt = &quot;&quot;;" line106="        myRiddle.result = 0;" line107="        myRiddle.answer = 0;" line108="        return myRiddle;" line109="    }" line110="" line111="}" numlines="112"></mutation></block></statement></block></xml>