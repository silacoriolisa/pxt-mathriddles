<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="tNMAWuphqqhm(_ETBmlq" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="oMh0sXn![m1C(0:sRofg"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace MathRiddle{" line1="" line2="    " line3="" line4="    export class Riddle{" line5="        riddletxt: string;" line6="        result: number;" line7="        answer: number;" line8=" " line9="        //%block = &quot;Create a riddle in |$this&quot;" line10="        //%this.defl = myRiddle" line11="        askRiddle(): void{" line12="            let mathOp = randOp();" line13="            let operator, opA, opB;" line14="" line15="            switch (mathOp) {" line16="                case 1:" line17="                    opA = randint(1, 15);" line18="                    opB = randint(1, 15);" line19="                    operator = &quot;+&quot;;" line20="                    this.result = opA + opB;" line21="                    break;" line22="                case 2:" line23="                    opA = randint(1, 15);" line24="                    opB = randint(1, opA);" line25="                    operator = &quot;-&quot;;" line26="                    this.result = opA - opB;" line27="                    break;" line28="                case 3:" line29="                    opA = randint(1, 10);" line30="                    opB = randint(1, (10 - opA + 1));" line31="                    operator = &quot;*&quot;;" line32="                    this.result = opA * opB;" line33="                    break;" line34="                case 4:" line35="            }" line36="            this.riddletxt = (convertToText(opA) + operator + convertToText(opB));" line37="        }" line38="" line39="        //%block = &quot;Show |$this&quot;" line40="        showRiddle(): void{" line41="            basic.showString(this.riddletxt); //&quot;?&quot; is automatically displayed when requested for inputs" line42="        }" line43="" line44="        //%block = &quot;Show answer to |$this&quot;" line45="        showAnswer(): void{" line46="            basic.showString(convertToText(this.answer));" line47="        }" line48="" line49="        //%block = &quot;Check answer to |$this&quot;" line50="        checkAsnwer(): boolean{" line51="            if(this.answer == this.result){" line52="                return true" line53="            }else{" line54="                return false" line55="            }" line56="        }" line57="" line58="        //%block = &quot;Wait for a reply to |$this&quot;" line59="        getReply(): void{" line60="        let tens, ones, result = 0;" line61="" line62="        tens = this.updateReply(tens);" line63="        basic.pause(200);" line64="        ones = this.updateReply(ones);" line65="        " line66="        this.result = tens * 10 + ones;" line67="        }" line68="" line69="        private updateReply(value: number): number{" line70="            while (!(input.buttonIsPressed(Button.A) &amp;&amp; input.buttonIsPressed(Button.B))) {" line71="                basic.showNumber(value);" line72="                if (input.buttonIsPressed(Button.A)) {" line73="                    if (value &lt; 9) {" line74="                        value++;" line75="                    } else {" line76="                        value = 0;" line77="                    }" line78="                } else if (input.buttonIsPressed(Button.B)) {" line79="                    if (value &gt; 0) {" line80="                        value--;" line81="                    } else {" line82="                        value = 9;" line83="                    }" line84="                }" line85="            }" line86="            basic.showArrow(ArrowNames.East);" line87="            //basic.clearScreen()" line88="            return value;" line89="        }" line90="" line91="    //end of class definition" line92="    }" line93="" line94="    function randOp(): number{" line95="        // 1:&quot;+&quot;, 2:&quot;-&quot;, 3:&quot;*&quot;, 4:&quot;/&quot;" line96="        //Division needs to be thought through" line97="        return randint(1, 3);" line98="    }" line99="" line100="    //% block=&quot;newRiddle&quot;" line101="    //% blockSetVariable=myRiddle" line102="    export function createMyRiddle(): Riddle {" line103="        let myRiddle = new Riddle();" line104="        myRiddle.riddletxt = &quot;&quot;;" line105="        myRiddle.result = 0;" line106="        myRiddle.answer = 0;" line107="        return myRiddle;" line108="    }" line109="" line110="}" numlines="111"></mutation></block></statement></block></xml>